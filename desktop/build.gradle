//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// The build.gradle is a part of project utopia, under MIT License.
// See https://opensource.org/licenses/MIT for license information.
// Copyright (c) 2021 moe-org All rights reserved.
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *


import javax.swing.RootPaneContainer
import java.lang.reflect.Method
import java.nio.charset.Charset
import java.nio.charset.StandardCharsets
import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardCopyOption
import org.gradle.internal.os.OperatingSystem

import java.util.stream.Stream

// 插件设置
plugins {
    // java 程序
    id 'java-library'

    // 打包jar
    id 'com.github.johnrengelman.shadow' version '7.1.0'

}

// LWJGL
switch (OperatingSystem.current()) {
    case OperatingSystem.LINUX:
        def osArch = System.getProperty("os.arch")
        project.ext.lwjglNatives = osArch.startsWith("arm") || osArch.startsWith("aarch64")
                ? "natives-linux-${osArch.contains("64") || osArch.startsWith("armv8") ? "arm64" : "arm32"}"
                : "natives-linux"
        break
    case OperatingSystem.MAC_OS:
        project.ext.lwjglNatives = System.getProperty("os.arch").startsWith("aarch64") ? "natives-macos-arm64" : "natives-macos"
        break
    case OperatingSystem.WINDOWS:
        def osArch = System.getProperty("os.arch")
        project.ext.lwjglNatives = osArch.contains("64")
                ? "natives-windows${osArch.startsWith("aarch64") ? "-arm64" : ""}"
                : "natives-windows-x86"
        break
}

// 依赖
dependencies {
    // 依赖core
    api project(":core")

    // LWJGL
    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-assimp"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-openal"
    implementation "org.lwjgl:lwjgl-opengl"
    implementation "org.lwjgl:lwjgl-stb"
    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-assimp::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
}

// 配置启动类
jar {
    manifest.attributes.put("Main-Class", "moe.kawayi.org.utopia.desktop.main.DesktopLauncher")

    finalizedBy shadowJar
}

// 打包
shadowJar {
    archiveBaseName.set("desktop")
    archiveVersion.set("${rootProject.version}")
    archiveClassifier.set("release")

    destinationDirectory.set(new File("${desktopReleaseDir}"))

    rootProject.ext.desktopReleaseFile = new File("${desktopReleaseDir}").toPath().resolve("desktop-${rootProject.version}-release.jar")
}

// 发布文件
static void releaseFile(String origin, String des) {
    Paths.get(des).toFile().mkdirs()

    Files.copy(Paths.get(origin), Paths.get(des), StandardCopyOption.REPLACE_EXISTING)
}

// 发布
tasks.register("release") {
    description "package and copy assets"
    dependsOn ":desktop:shadowJar"
    dependsOn rootProject.tasks.named("allJavaSourceJar")
    dependsOn rootProject.tasks.named("allJavadocJar")

    //=====---------- copy source ----------=====
    // copy icon
    releaseFile("${rootDir.toString()}/icon/Utopia(32x32).png", "${desktopReleaseDir}/Utopia(32x32).png")
    releaseFile("${rootDir.toString()}/icon/Utopia(128x128).png", "${desktopReleaseDir}/Utopia(128x128).png")

    // copy font
    releaseFile("${rootDir.toString()}/assets/fonts/unifont.ttf", "${desktopReleaseDir}/assets/fonts/unifont.ttf")
}

// 启动任务
task run(type: Exec) {
    // 获取参数文件
    // 按行来获取参数
    var arguments = new ArrayList<String>()

    var argFile = rootProject.rootDir.toPath().resolve("desktop-arguments.txt")

    if (Files.exists(argFile)) {
        try (Stream<String> stream = Files.lines(argFile)) {
            stream.forEach(arguments::add)
        }
    } else {
        // 创建一个新的默认文件
        var lines = new ArrayList<String>()
        lines.add("-jar")
        lines.add(file("${desktopReleaseFile}").toString())

        arguments.add("-jar")
        arguments.add(file("${desktopReleaseFile}").toString())

        var builder = new StringBuilder()
        lines.forEach((str) -> { builder.append(str); builder.append("\n") })

        Files.write(argFile, builder.toString().getBytes(Charset.defaultCharset()))
    }

    // load
    var ending = ""
    if (OperatingSystem.current() == OperatingSystem.WINDOWS) {
        ending = ".exe"
    }

    var exec = file(System.getProperty('java.home')).toPath().resolve("bin/java${ending}")

    workingDir "${desktopReleaseDir}"
    executable exec.toString()
    args arguments
}
