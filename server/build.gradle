//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// The build.gradle is a part of project utopia, under MIT License.
// See https://opensource.org/licenses/MIT for license information.
// Copyright (c) 2021 moe-org All rights reserved.
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

import java.lang.reflect.Method
import java.nio.charset.Charset
import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardOpenOption
import java.util.stream.Stream


plugins {
    // java 库
    id 'java-library'

    // 打包jar
    id 'com.github.johnrengelman.shadow' version '7.1.0'
}


dependencies {
    // jackson
    api "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"

    // core
    api project(":core")
}

// 配置启动类
jar {
    manifest.attributes.put("Main-Class", "moe.kawayi.org.utopia.server.main.Main")

    finalizedBy shadowJar
}

// 打包
shadowJar {
    archiveBaseName.set("server")
    archiveVersion.set("${rootProject.version}")
    archiveClassifier.set("release")

    destinationDirectory.set(new File("${serverReleaseDir}"))

    rootProject.ext.serverReleaseFile = new File("${serverReleaseDir}").toPath().resolve("server-${rootProject.version}-release.jar")
}

// 发布
tasks.register("release") {
    description "package and copy assets"
    dependsOn ":server:shadowJar"
    dependsOn rootProject.tasks.named("allJavaSourceJar")
    dependsOn rootProject.tasks.named("allJavadocJar")
}

// 启动任务
tasks.register("run") {
    dependsOn "release"

    doLast {
        println "server at:${file("${serverReleaseFile}").toURI().toURL().toString()}"

        // 获取参数文件
        // 按行来获取参数
        var args = new ArrayList<String>()

        var argFile = rootProject.rootDir.toPath().resolve("server-arguments.txt")

        if (Files.exists(argFile)) {
            try (Stream<String> stream = Files.lines(argFile)) {
                stream.forEach(args::add)
            }
        } else {
            // 创建一个新的默认文件
            var lines = new ArrayList<String>()
            lines.add("-jar")
            lines.add(file("${serverReleaseFile}").toString())

            args.add("-jar")
            args.add(file("${serverReleaseFile}").toString())

            var builder = new StringBuilder()
            lines.forEach((str) -> { builder.append(str); builder.append("\n") })

            Files.write(argFile, builder.toString().getBytes(Charset.defaultCharset()))
        }

        // load
        var ending = ""
        if (org.gradle.internal.os.OperatingSystem.current() == org.gradle.internal.os.OperatingSystem.WINDOWS) {
            ending = ".exe"
        }

        var exec = file(System.getProperty('java.home')).toPath().resolve("bin/java${ending}")
        var builder = new ProcessBuilder()

        builder.command(exec.toString())

        args.forEach((str) -> { builder.command().add(str) })

        builder.directory(file("${serverReleaseDir}"))

        builder.inheritIO()

        println "execute:${builder.command()} at ${builder.directory()}"

        var started = builder.start()
        println "exit code:${started.waitFor()}"
    }
}
