import java.nio.file.Files
import java.nio.file.Paths

//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// The build.gradle is a part of project utopia, under MIT License.
// See https://opensource.org/licenses/MIT for license information.
// Copyright (c) 2021 moe-org All rights reserved.
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

// 引入gradle插件
buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
        google()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
}


plugins {
    id 'java'
}

// 设置版本号选项
def clearVersion = Files.readString(Paths.get("${rootDir}/version.txt"))
def SNAPSHOT_BUILD_KEY = "SnapshotBuild"
def snapshotBuildNumber = null

// 面向所有项目的设置
allprojects {
    // 组id
    group = "moe.kawayi.org"

    // 设置项目版本号
    def projectDef = project.getProperties()
    def _versionString_ = clearVersion

    snapshotBuildNumber = projectDef.containsKey(SNAPSHOT_BUILD_KEY) ? projectDef.get(SNAPSHOT_BUILD_KEY) : ""
    if (snapshotBuildNumber != "") {
        _versionString_ = _versionString_ + "-" + snapshotBuildNumber + "-SNAPSHOT"
    }

    version = _versionString_

    // 设置全局变量
    ext {
        // lwjgl版本号
        lwjglVersion = "3.3.1"

        // log4j2版本号
        log4j2Version = "2.17.0"

        // netty版本号
        nettyVersion = "4.1.69.Final"

        // junit版本号
        junitVersion = "5.8.1"

        // jackson版本号
        jacksonVersion = "2.13.0"

        // hocon(com.typesafe:config)版本号
        hoconVersion = "1.4.1"

        // 发布路径
        releaseDir = "${rootDir}/output-package/"
        desktopReleaseDir = "${releaseDir}/desktop"
        serverReleaseDir = "${releaseDir}/server"

        // javadoc输出路径
        javadocReleasePath = "docs"

        // 工具的版本
        jacocoVersion = "0.8.8"
        checkstyleVersion = "10.3.1"
    }

    // 设置储存库
    repositories {
        mavenCentral()
        google()
        gradlePluginPortal()
    }

    // 面向所有项目设置Java编译参数
    compileJava {
        options.encoding("UTF-8")
        options.setEncoding("UTF-8")
        options.forkOptions.jvmArgs << '-Dfile.encoding=UTF-8' << '-Duser.language=es'
        options.forkOptions.jvmArgs << "-Xlint:unchecked"
        options.compilerArgs << "-Werror"
        options.verbose(true)
    }

    // 设置Java版本
    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(18))
        }
    }
}

// 面向所有子项目设置插件
subprojects {
    apply plugin: "checkstyle"
    apply plugin: "jacoco"

    // 设置checkstyle
    checkstyle {
        ignoreFailures = false

        // 定义一些变量
        // 小驼峰和大驼峰的命名设置
        configProperties.put("utopia.checkstyle.small_hump", "[a-z]+[A-Za-z0-9]*")
        configProperties.put("utopia.checkstyle.large_hump", "[A-Z]+[A-Za-z0-9]*")
        configProperties.put("utopia.checkstyle.always_large", "[A-Z]+[A-Z0-9_]*")
    }

    jacoco {
        toolVersion = "${jacocoVersion}"
    }

    // 在解析之后
    afterEvaluate {
        // jacoco报告设置
        jacocoTestReport {
            dependsOn test // 调用jacoco之前进行测试

            reports {
                // 设置输出xml/html
                xml.required = true
                html.required = true
            }
        }

        // test调用jacoco
        tasks.named("test") {
            it.finalizedBy(tasks.named("jacocoTestReport")) // 在test完成之后调用jacoco
        }

        // 设置通用依赖
        dependencies {
            // 测试框架
            testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
        }

        // 设置测试
        test {
            useJUnitPlatform()

            testLogging {
                events "passed", "skipped", "failed"
            }
        }

        // checkstyle任务设置
        // 添加插件
        checkstyleMain {
            checkstyleClasspath += files("${rootDir}/config/checkstyle/keep-project-great.jar")
        }
        checkstyleTest {
            checkstyleClasspath += files("${rootDir}/config/checkstyle/keep-project-great.jar")
        }

        // 增加编译参数
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint"
        }
    }

    dependencies {
        checkstyle "com.puppycrawl.tools:checkstyle:${checkstyleVersion}"
    }
}

// 添加一个辅助任务，用于输出版本号
// 输出版本号
tasks.register("printVersion") {
    println(project.version)
}

// 声明
tasks.register("allJavadoc", Javadoc)
tasks.register("allJavaSourceJar", Jar)
tasks.register("allJavadocJar", Jar)

// 解析项目过后的设置
gradle.projectsEvaluated {
    gradle ->
        {
            // 生成所有子项目的javadoc
            tasks.named("allJavadoc", Javadoc) {
                description "Collect all subproject javadoc into one directory"

                it.source subprojects.collect { project -> project.sourceSets.main.allJava }

                it.classpath = files(subprojects.collect { project -> project.sourceSets.main.compileClasspath })

                // 输出到docs目录
                it.destinationDir = new File(project.rootDir, javadocReleasePath as String)

                // 设置
                it.failOnError = true
                it.options.setJFlags(["-Dfile.encoding=UTF-8", "-Duser.language=es"])
                it.options.setEncoding("UTF-8")
                it.options.encoding("UTF-8")
                it.options.setLocale("zh-cn")
                it.options.setOverview(rootProject.rootDir.toString() + "/config/overview.html".toString() as String)
                it.options.setWindowTitle("Utopia Doc")
                it.title = "Utopia Javadoc ver." + rootProject.version.toString()
            }
            // 生成所有子项目的源代码的jar
            tasks.named("allJavaSourceJar", Jar) {
                description "Collect all subproject source code into one jar"

                it.dependsOn(tasks.named("classes"))

                it.from subprojects.collect { project -> project.sourceSets.main.allSource }

                it.destinationDirectory.set(file("${releaseDir}"))
                it.archiveFileName = "utopia-source-${rootProject.version.toString()}.jar"
            }
            // 生成所有子项目的javadoc的jar
            tasks.named("allJavadocJar", Jar) {
                description "Collect all subproject javadoc into one jar"

                it.dependsOn(tasks.named("allJavadoc"))

                it.from "${rootProject.rootDir.toString()}/${javadocReleasePath.toString()}"

                it.destinationDirectory.set(file("${releaseDir}"))
                it.archiveFileName = "utopia-javadoc-${rootProject.version.toString()}.jar"
            }
        }
}

defaultTasks 'tasks'
